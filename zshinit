# ---------------------------------------------------------
# vim: ts=4 ft=zsh
#
# File: zshinit.zsh
#
# Borrow from Prezto --- The Heart Module Loader.
#
# Author: Ernie Lin
# Update: 2022-06-10
# ---------------------------------------------------------

# Check for the minimum supported version.
min_zsh_version='4.3.11'
if ! autoload -Uz is-at-least || ! is-at-least "$min_zsh_version"; then
	printf "Old zsh detected, minimum required: %s\n" "$min_zsh_version" >&2
	return 1
fi
unset min_zsh_version

# Loading modules.
function pmodload {
	local -a pmodules
	local -a pmodule_dirs
	local -a locations
	local pmodule
	local pmodule_location
	local pfunction_glob='^([_.]*|prompt_*_setup|README*|*~)(-.N:t)'

	# Load in any additional directories and warn if they don't exist.
	zstyle -a ':e4czmod:load' pmodule-dirs 'user_pmodule_dirs'
	for user_dir in "$user_pmodule_dirs[@]"; do
		if [[ ! -d "$user_dir" ]]; then
			echo "$0: Missing user module dir: $user_dir"
		fi
	done

	pmodule_dirs=("$ZFOLDER/modules" "$ZFOLDER/contrib" "$user_pmodule_dirs[@]")

	# $argv is overridden in the anonymous function.
	pmodules=("$argv[@]")

	# Load pmodules.
	for pmodule in "$pmodules[@]"; do
		if zstyle -t ":e4czmod:module:$pmodule" loaded 'yes' 'no'; then
			continue
		else
			locations=(${pmodule_dirs:+${^pmodule_dirs}/$pmodule(-/FN)})
			if (( ${#locations} > 1 )); then
				if ! zstyle -t ':e4czmod:load' pmodule-allow-overrides 'yes'; then
					print "$0: conflicting module locations: $locations"
					continue
				fi
			elif (( ${#locations} < 1 )); then
				print "$0: no such module: $pmodule"
				continue
			fi

			# Grab the full path to this module.
			pmodule_location=${locations[1]}

			# Add functions to $fpath.
			fpath=(${pmodule_location}/functions(-/FN) $fpath)

			function {
				local pfunction

				# Extended globbing is needed for listing autoloadable function directories.
				setopt LOCAL_OPTIONS EXTENDED_GLOB

				# Load functions.
				for pfunction in ${pmodule_location}/functions/$~pfunction_glob; do
					autoload -Uz "$pfunction"
				done
			}

			if [[ -s "${pmodule_location}/init.zsh" ]]; then
				source "${pmodule_location}/init.zsh"
			elif [[ -s "${pmodule_location}/${pmodule}.plugin.zsh" ]]; then
				source "${pmodule_location}/${pmodule}.plugin.zsh"
			fi

			if (( $? == 0 )); then
				zstyle ":e4czmod:module:$pmodule" loaded 'yes'
			else
				# Remove the $fpath entry.
				fpath[(r)${pmodule_location}/functions]=()

				function {
					local pfunction

					# Extended globbing is needed for listing autoloadable function
					#  directories.
					setopt LOCAL_OPTIONS EXTENDED_GLOB

					# Unload functions.
					for pfunction in ${pmodule_location}/functions/$~pfunction_glob; do
						unfunction "$pfunction"
					done
				}

				zstyle ":e4czmod:module:$pmodule" loaded 'no'
			fi
		fi
	done
}

# This needs to be done here because inside the pmodload function ${0:h}
#  evaluates to the current directory of the shel.
ZFOLDER=${0:h}

# Load ZSH modules.
zstyle -a ':e4czmod:load' zmodule 'zmodules'
for zmodule ("$zmodules[@]") zmodload "zsh/${(z)zmodule}"
unset zmodule{s,}

# Load more specific 'run-help' function from $fpath.
(( $+aliases[run-help] )) && unalias run-help && autoload -Uz run-help

# Autoload ZSH functions.
zstyle -a ':e4czmod:load' zfunction 'zfunctions'
for zfunction ("$zfunctions[@]") autoload -Uz "$zfunction"
unset zfunction{s,}

# Load modules.
zstyle -a ':e4czmod:load' pmodule 'pmodules'
pmodload "$pmodules[@]"
unset pmodules
